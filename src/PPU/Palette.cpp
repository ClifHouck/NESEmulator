#include "Palette.hpp"

#include <cassert>

Palette::
Palette(u8_byte value) :
    m_value (value)
{
    u8_byte luminance   = (value & LUMINANCE_MASK) >> LUMINANCE_SHIFT;
    u8_byte chrominance = (value & CHROMINANCE_MASK); 
    m_color = getColor(luminance, chrominance);
}

Palette::Color
Palette::
color() const
{
    return *m_color;
}

Palette::Color::
Color(u8_byte red, u8_byte green, u8_byte blue) :
    m_red (red),
    m_green (green),
    m_blue (blue)
{
}

u8_byte
Palette::Color::
red() const
{
    return m_red;
}

u8_byte
Palette::Color::
green() const
{
    return m_green;
}

u8_byte
Palette::Color::
blue() const
{
    return m_blue;
}

// From http://www.thealmightyguru.com/Games/Hacking/Wiki/index.php?title=NES_Palette
// The array is laid out like the following:
// colors[luminance][chrominance]
const Palette::Color Palette::colors[MAX_LUMINANCE][MAX_CHROMINANCE] = {
    {
        Color(0x7C, 0x7C, 0x7C),
        Color(0x00, 0x00, 0xFC),
        Color(0x00, 0x00, 0xBC),
        Color(0x44, 0x28, 0xBC),

        Color(0x94, 0x00, 0x84),
        Color(0xA8, 0x00, 0x20),
        Color(0xA8, 0x10, 0x00),
        Color(0x88, 0x14, 0x00),

        Color(0x50, 0x30, 0x00),
        Color(0x00, 0x78, 0x00),
        Color(0x00, 0x68, 0x00),
        Color(0x00, 0x58, 0x00),

        Color(0x00, 0x40, 0x58),
        Color(0x00, 0x00, 0x00),
        Color(0x00, 0x00, 0x00),
        Color(0x00, 0x00, 0x00),
    },
    {
        Color(0xBC, 0xBC, 0xBC),
        Color(0x00, 0x78, 0xF8),
        Color(0x00, 0x58, 0xF8),
        Color(0x68, 0x44, 0xFC),

        Color(0xD8, 0x00, 0xCC),
        Color(0xE4, 0x00, 0x58),
        Color(0xF8, 0x38, 0x00),
        Color(0xE4, 0x5C, 0x10),

        Color(0xAC, 0x7C, 0x00),
        Color(0x00, 0xB8, 0x00),
        Color(0x00, 0xA8, 0x00),
        Color(0x00, 0xA8, 0x44),

        Color(0x00, 0x88, 0x88),
        Color(0x00, 0x00, 0x00),
        Color(0x00, 0x00, 0x00),
        Color(0x00, 0x00, 0x00),
    },
    {
        Color(0xF8, 0xF8, 0xF8),
        Color(0x3C, 0xBC, 0xFC),
        Color(0x68, 0x88, 0xFC),
        Color(0x98, 0x78, 0xF8),

        Color(0xF8, 0x78, 0xF8),
        Color(0xF8, 0x58, 0x98),
        Color(0xF8, 0x78, 0x58),
        Color(0xFC, 0xA0, 0x44),

        Color(0xF8, 0xB8, 0x00),
        Color(0xB8, 0xF8, 0x18),
        Color(0x58, 0xD8, 0x54),
        Color(0x58, 0xF8, 0x98),

        Color(0x00, 0xE8, 0xD8),
        Color(0x78, 0x78, 0x78),
        Color(0x00, 0x00, 0x00),
        Color(0x00, 0x00, 0x00),
    },
    {
        Color(0xFC, 0xFC, 0xFC),
        Color(0xA4, 0xE4, 0xFC),
        Color(0xB8, 0xB8, 0xF8),
        Color(0xD8, 0xB8, 0xF8),

        Color(0xF8, 0xB8, 0xF8),
        Color(0xF8, 0xA4, 0xC0),
        Color(0xF0, 0xD0, 0xB0),
        Color(0xFC, 0xE0, 0xA8),

        Color(0xF8, 0xD8, 0x78),
        Color(0xD8, 0xF8, 0x78),
        Color(0xB8, 0xF8, 0xB8),
        Color(0xB8, 0xF8, 0xD8),

        Color(0x00, 0xFC, 0xFC),
        Color(0xF8, 0xD8, 0xF8),
        Color(0x00, 0x00, 0x00),
        Color(0x00, 0x00, 0x00),
    }
};

const Palette::Color*
Palette::
getColor(u8_byte luminance, u8_byte chrominance)
{
    assert(luminance < MAX_LUMINANCE && "Improper luminance fed to Palette::getColor!");
    assert(chrominance < MAX_CHROMINANCE && "Improper chrominance fed to Palette::getColor!");
    return &(Palette::colors[luminance][chrominance]);
}
